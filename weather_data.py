# -*- coding: utf-8 -*-
"""Weather data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YmEgWPJuGiXnQgfA5rolelnowtimS3_N
"""

import numpy as np # linear algebra
import pandas as pd # data processing

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# Import necessary libraries
import kagglehub
from kagglehub import KaggleDatasetAdapter
import pandas as pd

# Specify the file path with the correct file extension (e.g., 'GlobalWeatherRepository.csv')
file_path = "GlobalWeatherRepository.csv"

# Load the latest version
data = kagglehub.dataset_load(
    KaggleDatasetAdapter.PANDAS,
    "nelgiriyewithana/global-weather-repository",
    file_path,
)

# Print the first 5 records
print("First 5 records:", data.head())

# Check the first few rows to ensure data loading was successful
data.head()

# Check column names
print(data.columns)

# Check data types
print(data.dtypes)

# Get summary statistics
print(data.describe())

data.info()

import plotly.express as px
import plotly.graph_objects as go

mapbox_plot = px.scatter_mapbox(data, lat='latitude', lon='longitude', hover_name='location_name', color='temperature_celsius', title='Temperature Map')
mapbox_plot.update_layout(mapbox_style='open-street-map')
mapbox_plot.show()

bar_chart = px.bar(data, x='country', y='temperature_celsius', title='Average Temperature by Country')
bar_chart.show()

scatter_plot = px.scatter(data, x='temperature_celsius', y='humidity', color='country', title='Temperature vs Humidity')
scatter_plot.show()

histogram = px.histogram(data, x='temperature_celsius', nbins=20, title='Temperature Distribution')
histogram.show()

scatter_3d = px.scatter_3d(data, x='temperature_celsius', y='humidity', z='wind_mph', color='country', title='3D Scatter Plot')
scatter_3d.show()

polar_scatter = px.scatter_polar(data, r='wind_mph', theta='wind_direction', color='country', title='Wind Speed by Direction')
polar_scatter.show()

calendar_heatmap = px.density_heatmap(data, x='last_updated', y='location_name', z='temperature_celsius', title='Calendar Heatmap')
calendar_heatmap.show()

# Create a 3D scatter plot using Plotly Express
fig = px.scatter_3d(
    data,
    x='temperature_celsius',
    y='humidity',
    z='wind_kph',
    color='temperature_celsius',  # You can adjust the color scale based on a variable
    size_max=10,  # Adjust the maximum marker size
    labels={'temperature_celsius': 'Temperature (Â°C)', 'humidity': 'Humidity (%)', 'wind_kph': 'Wind Speed (kph)'},
    title='3D Scatter Plot of Temperature, Humidity, and Wind Speed'
)

# Show the interactive 3D scatter plot
fig.show()

polar_bar = px.bar_polar(data, r='temperature_celsius', theta='wind_direction', color='country', title='Temperature by Wind Direction (Polar Bar)')
polar_bar.show()

import matplotlib.pyplot as plt

# Decide whether to use all cities, top 10, or last 10 cities based on your criteria
# Example: Select the top 10 cities with the highest temperature variation
top_10_cities = data.groupby('location_name')['temperature_celsius'].std().nlargest(10).index

# Create a multivariate time series plot for temperature, humidity, and wind speed
plt.figure(figsize=(12, 8))
for city in top_10_cities:
    city_data = data[data['location_name'] == city]
    plt.plot(city_data['last_updated'], city_data['temperature_celsius'], label=f'Temperature - {city}')
    plt.plot(city_data['last_updated'], city_data['humidity'], label=f'Humidity - {city}')
    plt.plot(city_data['last_updated'], city_data['wind_kph'], label=f'Wind Speed - {city}')

plt.xlabel('Month')
plt.ylabel('Values')
plt.title('Temperature, Humidity, and Wind Speed Trends for Top 10 Cities')
plt.legend()
plt.grid(True)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

import folium
from folium.plugins import HeatMap
from IPython.display import display

# Create a Folium map centered at a specific latitude and longitude
m = folium.Map(location=[0, 0], zoom_start=2)  # You can adjust the coordinates and zoom level

# Create a list of coordinates and corresponding values (e.g., temperature)
locations = data[['latitude', 'longitude']].values
values = data['temperature_celsius'].values

# Normalize the values for the heatmap (adjust as needed)
max_value = max(values)
normalized_values = [v / max_value for v in values]

# Create a HeatMap layer on the map
HeatMap(list(zip(locations[:, 0], locations[:, 1], normalized_values))).add_to(m)

# Display the map in the Kaggle notebook
display(m)

avg_air_quality = data.groupby('country')['air_quality_PM2.5'].mean().sort_values(ascending=False)


print(avg_air_quality.head(10))

avg_air_quality.head(10).plot(kind='bar', title='Top 10 Countries with Highest air pollution')
plt.xlabel('Country')
plt.ylabel('Average Air Quality')
plt.show()

